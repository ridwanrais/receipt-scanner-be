name: Deploy to VPS

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract binary from Docker image
        run: |
          docker create --name app-container app:latest
          docker cp app-container:/app/app-binary ./app-binary
          docker rm app-container
          chmod +x app-binary

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Create .env file
        run: |
          # Set default values if not provided in secrets
          PORT=${{ secrets.PORT || '8080' }}
          MAX_WORKERS=${{ secrets.MAX_WORKERS || '5' }}
          OCR_LANGUAGES=${{ secrets.OCR_LANGUAGES || 'eng,ind' }}
          SUPABASE_BUCKET=${{ secrets.SUPABASE_BUCKET || 'invoice-images' }}
          USE_OPENROUTER=${{ secrets.USE_OPENROUTER || 'true' }}
          OPENROUTER_MODEL_ID=${{ secrets.OPENROUTER_MODEL_ID || 'meta-llama/llama-4-maverick:free' }}

          # Create .env file with all values
          cat > .env << EOL
          # Hugging Face Configuration
          HUGGINGFACE_API_KEY=${{ secrets.HUGGINGFACE_API_KEY }}
          
          # OpenRouter Configuration
          OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
          USE_OPENROUTER=$USE_OPENROUTER
          OPENROUTER_MODEL_ID=$OPENROUTER_MODEL_ID
          
          # Supabase Configuration
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_BUCKET=$SUPABASE_BUCKET
          SUPABASE_API_KEY=${{ secrets.SUPABASE_API_KEY }}
          
          # Server Configuration
          PORT=$PORT
          MAX_WORKERS=$MAX_WORKERS
          OCR_LANGUAGES=$OCR_LANGUAGES
          
          # PostgreSQL Configuration
          POSTGRES_DB_URL=${{ secrets.POSTGRES_DB_URL }}
          
          # Application Environment
          GIN_MODE=release
          EOL

      - name: Copy binary to VPS
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "mkdir -p ${{ secrets.DEPLOY_PATH }}"
          scp app-binary ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}/app-binary

      - name: Copy .env file
        run: |
          scp .env ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:${{ secrets.DEPLOY_PATH }}/.env
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "chmod 600 ${{ secrets.DEPLOY_PATH }}/.env"

      - name: Copy systemd service file
        run: |
          scp .github/workflows/app.service ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/tmp/app.service
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "sudo mv /tmp/app.service /etc/systemd/system/app.service && sudo systemctl daemon-reload"

      - name: Restart service
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "sudo systemctl restart app.service && sudo systemctl status app.service"
